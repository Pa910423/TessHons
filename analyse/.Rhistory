head(gazeXY$samples)
#Left eye was recorded, so the samples are in gxL and gyL
head(gazeXY$samples$gxL)
eyelinkReader
?eyelinkReader
read_preamble(EDF_example)
print.eyelinkRecording(EDF_example)
#Work out how to go through all values and detect deviations
mean(gazeXY$samples$gxL)
gazeXY$samples$gxL
?mean
#Work out how to go through all values and detect deviations
mean(gazeXY$samples$gxL, na.rm=T)
install.packages('tidyverse')
#Start using tidyverse to calculate things
library(dplyr)
gazeXY %>% summarise(na_count = sum(is.na(gXL)))
gazeXY$samples %>% summarise(na_count = sum(is.na(gXL)))
gazeXY$samples %>% summarise(na_count = sum(is.na(gxl)))
gazeXY$samples
head( gazeXY$samples )
gazeXY$samples %>% summarise(na_count = sum(is.na(gxL)))
nrows(gazeXY$samples)
nrow(gazeXY$samples)
numNAs / nrow(gazeXY$samples)
numNAs <- gazeXY$samples %>% summarise(na_count = sum(is.na(gxL)))
numNAs / nrow(gazeXY$samples)
gazeXY$samples
#Work out how to go through all values and detect deviations
mean(gazeXY$samples$gxL, na.rm=T)
mean(gazeXY$samples$gyL, na.rm=T)
meanX <- mean(gazeXY$samples$gxL, na.rm=T)
meanY <- mean(gazeXY$samples$gyL, na.rm=T)
cat('mean coordinates are: (', meanX, meanY, ')')
scrnCenter = scrnWidthHeight / 2
#Tess' Psychopy logfile says screen is 1470 x 956
scrnWidthHeight = [1470,956]
scrnCenter = scrnWidthHeight / 2
#Tess' Psychopy logfile says screen is 1470 x 956
scrnWidthHeight = (1470,956)
#Tess' Psychopy logfile says screen is 1470 x 956
scrnWidthHeight = [1470 956]
scrnCenter = scrnWidthHeight / 2
#Tess' Psychopy logfile says screen is 1470 x 956
scrnWidthHeight = c(1470, 956)
scrnCenter = scrnWidthHeight / 2
cat('scrnCenter = ', scrnCenter)
nrow(gazeXY$samples)
head(gazeXY$samples)
unique( gazeXY$amples$trial )
unique( gazeXY$samples$trial )
unique( gazeXY$samples$trial )
len( unique( gazeXY$samples$trial ) )
length( unique( gazeXY$samples$trial ) )
numTrials <- length( unique( gazeXY$samples$trial ) )
cat('number of trials =', numTrials)
exclusionDeg = 1.0 #if participant's eye is ever more than exclusionDeg away from fixation, Exclusion=1
widthPix = scrnWidthHeight[0]
heightPix = scrnWidthHeight[1]
monitorWidth = 39 #cm
viewdist = 57 #cm
widthScreenDeg =  2*(atan((monitorWidth/2)/viewdist) /pi*180)
pixelsPerDegree = widthPix / widthScreenDeg
exclusionPixels = exclusionDeg * pixelsPerDegree
centralZoneWidthPix = exclusionPixels*2
centralZoneHeightPix = exclusionPixels*2
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
leftLimitPixel
widthScreenDeg
pixelsPerDegree
widthScreenDeg =  2*(atan((monitorWidth/2)/viewdist) /pi*180)
widthScreenDeg
widthPix
widthPix = scrnWidthHeight[0]
heightPix = scrnWidthHeight[1]
monitorWidth = 39 #cm
viewdist = 57 #cm
widthScreenDeg =  2*(atan((monitorWidth/2)/viewdist) /pi*180)
pixelsPerDegree = widthPix / widthScreenDeg
exclusionPixels = exclusionDeg * pixelsPerDegree
centralZoneWidthPix = exclusionPixels*2
centralZoneHeightPix = exclusionPixels*2
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
leftLimitPixel
pixelsPerDegree
widthScreenDeg
widthPix
scrnWidthHeight = c(1470, 956)
scrnCenter = scrnWidthHeight / 2
cat('scrnCenter = ', scrnCenter)
#In past work, tended to use exclusion zone of 1 degree
exclusionDeg = 1.0 #if participant's eye is ever more than exclusionDeg away from fixation, Exclusion=1
widthPix = scrnWidthHeight[0]
heightPix = scrnWidthHeight[1]
monitorWidth = 39 #cm
viewdist = 57 #cm
widthScreenDeg =  2*(atan((monitorWidth/2)/viewdist) /pi*180)
pixelsPerDegree = widthPix / widthScreenDeg
exclusionPixels = exclusionDeg * pixelsPerDegree
centralZoneWidthPix = exclusionPixels*2
centralZoneHeightPix = exclusionPixels*2
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
leftLimitPixel
widthPix
scrnWidthHeight[0]
scrnWidthHeight
scrnWidthHeight[1]
scrnWidthHeight = c(1470, 956)
scrnCenter = scrnWidthHeight / 2
cat('scrnCenter = ', scrnCenter)
#In past work, tended to use exclusion zone of 1 degree
exclusionDeg = 1.0 #if participant's eye is ever more than exclusionDeg away from fixation, Exclusion=1
widthPix = scrnWidthHeight[1]
heightPix = scrnWidthHeight[2]
monitorWidth = 39 #cm
viewdist = 57 #cm
widthScreenDeg =  2*(atan((monitorWidth/2)/viewdist) /pi*180)
pixelsPerDegree = widthPix / widthScreenDeg
exclusionPixels = exclusionDeg * pixelsPerDegree
centralZoneWidthPix = exclusionPixels*2
centralZoneHeightPix = exclusionPixels*2
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
leftLimitPixel
rightLimitPixel
EDF_example <- "../dataEyetracking/results for p15 11.30am aug10.EDF"
gaze <- read_edf(EDF_example)
plot(gaze, trial = 1, show_fixations = TRUE, show_saccades = TRUE)
library(eyelinkReader)
#browseVignettes('eyelinkReader') #Seems to be no vignettes even though github page claims there is
EDF_example <- "../dataEyetracking/results for p14 10.15am aug10.EDF"
EDF_example <- "../dataEyetracking/results for p15 11.30am aug10.EDF"
gaze <- read_edf(EDF_example)
if (length(gaze)>0) {
cat('Success!')
} #Worked 31 Aug 2023
gaze <- read_edf(EDF_example)
if (length(gaze)>0) {
cat('Success!')
} #Worked 31 Aug 2023
#View(gaze$saccades)
plot(gaze, trial = 1, show_fixations = TRUE, show_saccades = TRUE)
#Need to go through all trials and check largest fixation deviation from center,
# and merge with PsychoPy data file.
#To do this, I could either set up an area of interest maybe, or manually
# import samples with selected attributes
gazeXY <- eyelinkReader::read_edf(EDF_example,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
#samples table contains the x,y locations
head(gazeXY$samples)
numTrials <- length( unique( gazeXY$samples$trial ) )
cat('number of trials =', numTrials)
#Left eye was recorded, so the samples are in gxL and gyL
head(gazeXY$samples$gxL)
#Work out how to go through all values and detect deviations
meanX <- mean(gazeXY$samples$gxL, na.rm=T)
meanY <- mean(gazeXY$samples$gyL, na.rm=T)
cat('mean gaze location is: (', meanX, meanY, ')')
#Start using tidyverse to calculate things
library(dplyr)
numNAs <- gazeXY$samples %>% summarise(na_count = sum(is.na(gxL)))
proportionMissing <- numNAs / nrow(gazeXY$samples)
#maybe the NAs are blinks.  1% of samples for this example EDF file
#Tess' Psychopy logfile says screen is 1470 x 956
scrnWidthHeight = c(1470, 956)
scrnCenter = scrnWidthHeight / 2
cat('scrnCenter = ', scrnCenter)
#In past work, we tended to use exclusion zone of 1 degree
exclusionDeg = 1.0 #if participant's eye is ever more than exclusionDeg away from fixation, Exclusion=1
widthPix = scrnWidthHeight[1]
heightPix = scrnWidthHeight[2]
monitorWidth = 39 #cm
viewdist = 57 #cm
widthScreenDeg =  2*(atan((monitorWidth/2)/viewdist) /pi*180)
pixelsPerDegree = widthPix / widthScreenDeg
exclusionPixels = exclusionDeg * pixelsPerDegree
centralZoneWidthPix = exclusionPixels*2
centralZoneHeightPix = exclusionPixels*2
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
#Go through every sample for all trials and indicate whether each event falls within the designated limits
cat(paste0("leftLimitPixel=",leftLimitPixel,"\n"))
dg
gazeXY$samples
str(gazeXY$samples)
unique(gazeXY$samples$trial)
length(unique(gazeXY$samples$trial))
gazeXY$samples %>% mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  )
gazeLocatn <- gazeXY$samples %>% mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  )
gazeLocatn$outOfCentralArea
gazeLocation %>% summarise(mean(outOfCentralArea))
gazeLocatn %>% summarise(mean(outOfCentralArea))
gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea))
gazeLocatn %>% summarise(outOfCentralArea = mean(as.numeric(outOfCentralArea)))
as.numeric(gazeLocatn$outOfCentralArea)
gazeLocatn <- gazeXY$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
as.numeric()
gazeLocatn <- gazeXY$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
gazeLocatn
is.na(gazeLocation$outOfCentralArea)
is.na(gazeLocatn$outOfCentralArea)
gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
perTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
perTrial
proportnTrialsOutside = (perTrial$outOfCentralArea > 0)
proportnTrialsOutside
proportnTrialsOutside = as.numeric( (perTrial$outOfCentralArea > 0) )
proportnTrialsOutside
cat("Proportion of trials for this participant that are outside the central zone =", proportnTrialsOutside)
cat("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
perTrial
library(readr)
c(EDF_example,".csv")
outputFilename = paste( EDF_example, ".csv" )
readr::write_excel_csv( outputFilename, perTrial )
write_excel_csv(perTrial)
?write_excel_csv
library(readr)
outputFilename = paste( EDF_example, ".csv" )
readr::write_excel_csv( perTrial, outputFilename )
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( perTrial, outputFilename )
inputEDFname <- EDF_example
!file.exists(inputEDFname)
eyelinkReportSummarise<- function(inputEDFname,df,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
perTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (perTrial$outOfCentralArea > 0) )
cat("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( perTrial, outputFilename )
}
eyelinkReportSummarise<- function(inputEDFname,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
perTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (perTrial$outOfCentralArea > 0) )
cat("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( perTrial, outputFilename )
}
eyelinkReportSummarise(inputEDFname, widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix)
eyelinkReportSummarise(inputEDFname, widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix)
eyelinkReportSummarise<- function(inputEDFname,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
#cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
perTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (perTrial$outOfCentralArea > 0) )
cat("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( perTrial, outputFilename )
}
eyelinkReportSummarise(inputEDFname, widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix)
eyelinkReportSummarise<- function(inputEDFname,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
#cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
eachTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (eachTrial$outOfCentralArea > 0) )
msg = paste("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( eachTrial, outputFilename )
return( eachTrial )
}
eachT <- eyelinkReportSummarise(inputEDFname, widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix)
eachT
widthPix
heighPix
heightPix
centralZoneHeightPix
centralZoneWidthPix
eyelinkReportSummarise<- function(inputEDFname,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
#cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
eachTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (eachTrial$outOfCentralArea > 0) )
msg = paste("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
print(msg)
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( eachTrial, outputFilename )
return( eachTrial )
}
eyelinkReportSummarise<- function(inputEDFname,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
#cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
eachTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (eachTrial$outOfCentralArea > 0) )
msg = paste("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
print(msg)
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( EDF_example, ".csv" )
readr::write_excel_csv( eachTrial, outputFilename )
return( eachTrial )
}
TESTME = TRUE
if (TESTME) {
inputEDFname <- "../dataEyetracking/results for p14 10.15am aug10.EDF"
widthPix = 1470
heightPix = 956
centralZoneHeightPix = 77.8
centralZoneWidthPix = 77.8
eachT <- eyelinkReportSummarise(inputEDFname, widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix)
}
eyelinkReportSummarise<- function(inputEDFname,widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix) {
#inputEDFname is the path and name of an EDF file
#widthPix is width of screen. Used to calculate center of screen
#Eyelink reports eye position in pixels
if (!file.exists(inputEDFname)) {
stop( paste0("ERROR no file ",fname," exists") )
}
leftLimitPixel = widthPix/2 - centralZoneWidthPix/2
rightLimitPixel = widthPix/2 + centralZoneWidthPix/2
bottomLimitPixel = heightPix/2 + centralZoneHeightPix/2
topLimitPixel = heightPix/2 - centralZoneHeightPix/2
gaze <- eyelinkReader::read_edf(inputEDFname,
import_samples = TRUE,
sample_attributes = c('time', 'gx', 'gy'))
if (length(gaze)==0) {
cat('Failure to read EDF file with eyelinkReader!')
}
# gaze$samples contains the x,y locations
#Go through every sample for all trials and indicate whether each event falls within the designated limits
gazeLocatn <- gaze$samples %>%
mutate(outOfCentralArea = (gxL < leftLimitPixel) | (gxL > rightLimitPixel)  ) %>%
mutate(outOfCentralArea = as.numeric(outOfCentralArea)) #Change boolean to 0/1
proportnOutside = gazeLocatn %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T)) #HAve to ignore NAs, which might be blinks
proportnOutside = proportnOutside$outOfCentralArea
#cat("Proportion of samples for this participant that are outside the central zone =", proportnOutside)
eachTrial <- gazeLocatn %>% group_by(trial) %>% summarise(outOfCentralArea = mean(outOfCentralArea, na.rm=T))
proportnTrialsOutside = as.numeric( (eachTrial$outOfCentralArea > 0) )
msg = paste("Proportion of trials for this participant that are outside the central zone =", mean(proportnTrialsOutside))
print(msg)
#Save as a CSV file the variable of whether in each trial the person's eyes were ever outside the central zone
library(readr)
outputFilename = paste0( inputEDFname, ".csv" )
readr::write_excel_csv( eachTrial, outputFilename )
return( eachTrial )
}
TESTME = TRUE #Unfortunately no equivalent in R of python __main__. Would have to use testthat I guess
if (TESTME) {
inputEDFname <- "../dataEyetracking/results for p14 10.15am aug10.EDF"
widthPix = 1470
heightPix = 956
centralZoneHeightPix = 77.8
centralZoneWidthPix = 77.8
eachT <- eyelinkReportSummarise(inputEDFname, widthPix,heightPix,centralZoneWidthPix,centralZoneHeightPix)
}
eachT
eachT %>% filter(outOfCentralArea ==0)
